<% content_for(:after_js) do %>
  <%= javascript_tag do %>
    document.addEventListener("DOMContentLoaded", function() {

    const inputBank = JSON.parse(document.querySelector('.inputBank').textContent);



    // === START / RESTORE EMPLOYEE =====================================
    const storedEmployee = inputBank['employee_numbers'] || inputBank['carrier']['employee_numbers'];
    const eInput = Array.from(document.querySelectorAll('[name="carrier[employee_numbers]"] option'))
      .filter(function(option) {return option.value.includes(storedEmployee)});
    eInput[0].selected = true;
    // === END / RESTORE EMPLOYEE =======================================



    // === START / RESTORE PREFECTURE / INDIVIDUAL PREFECTURES =====================================
      // Get stored input and retrieve previous selected inputs
      const areasCovered = inputBank['areas_covered'] || inputBank['carrier']['areas_covered'];
      if(areasCovered != undefined) {
        // Cross check the 'stored inputs' against the 'PSEUDO-inputs'
        Array.from(
          document.querySelectorAll("input[data-name='selectItemcarrier[areas_covered][]']"))
          .filter(function(input) {return areasCovered.includes(input.value)})
          .forEach(function(input) {input.checked = true});

        // Cross check the 'stored inputs' against the 'ORIGINAL-inputs'
        const origin = document.querySelector('#carrier_areas_covered');
        Array.from(
          document.querySelectorAll("option"))
          .filter(function(option) {return areasCovered.includes(option.value)})
          .forEach(function(option) {option.selected = true});

        // Replace placeholder text with the selected prefectures
        const placeholder = document.querySelector('span.placeholder');
        placeholder.textContent = areasCovered.join('、');
        restoreRegions();
      }
    // === END / RESTORE PREFECTURE / INDIVIDUAL PREFECTURES =======================================



    // === START / RESTORE PREFECTURE / REGIONS =======================================
      function restoreRegions() {
        const optGroup = document.querySelectorAll("label[data-group*='group']");
        for(let i = 0; i < optGroup.length; i++ ) {
          const currentOptGroup = document.querySelector(`label[data-group='group_${i}']`);
          const opts = Array.from(document.querySelectorAll(`input[data-group='group_${i}']`));
          const optsChecked = opts.filter(function(opt) {return opt.checked});
          if(optsChecked.length === opts.length) currentOptGroup.querySelector('input').checked = true;
        }
      }
    // === END / RESTORE PREFECTURE / REGIONS =======================================



    // === START / RESTORE VEHICLE =====================================
      const flag = inputBank['carrier'];
      if(flag != undefined) {
        const vehicles = inputBank['carrier']['vehicles_attributes'];
        const vehiclesKey = Object.keys(vehicles);
        // - When a new nest-form is made the index is based on a timestamp.
        // - e.g. carrier[vehicles_attributes][0][load_capacity] => Default Original
        // - e.g. carrier[vehicles_attributes][1524558175715][load_capacity] => Second One
        // - If there is a submission error and the page reloads, the timestamp is replaced with an index.
        // - carrier[vehicles_attributes][1524558175715][load_capacity] => carrier[vehicles_attributes][1][load_capacity]
        // - Hence the reason for 'vehiclesKey[i]' for the storedProperty AND 'i' for the currentProperty.
        for(let i = 0; i < vehiclesKey.length; i++) {
          const vehicle = vehicles[vehiclesKey[i]];
          for(const property in vehicle) {
            const storedProperty = vehicles[`${vehiclesKey[i]}`][`${property}`];
            const currentProperty = document.querySelector(`[name='carrier[vehicles_attributes][${i}][${property}]']`);
            currentProperty.value = storedProperty;
          }
        }
      } else {
        // START / FOR EDIT PROFILE
        let vehicles = JSON.parse(document.querySelector('.inputBankVehicle').textContent);
        vehicles = vehicles.map(function(vehicle) {
          return {
            load_capacity: vehicle.load_capacity,
            vehicle_type: vehicle.vehicle_type,
            quantity: vehicle.quantity,
            type_specifications: vehicle.type_specifications,
            feature: vehicle.feature
          }
        });
        for(let i = 0; i < vehicles.length; i++) {
          const vehicle = vehicles[i];
          for(const property in vehicle) {
            const storedProperty = vehicles[i][`${property}`];
            const currentProperty = document.querySelector(`[name='carrier[vehicles_attributes][${i}][${property}]']`);
            currentProperty.value = storedProperty;
          }
        }
        // END / FOR EDIT PROFILE
      }
    // === END / RESTORE VEHICLE =======================================



    // === START / RESTORE SPECIALTIES =====================================
      const storedSpecialties = inputBank['specialties'] || inputBank['carrier']['specialties'];
      const spInputs = document.querySelectorAll('[name="carrier[specialties][]"]');
      for(let i = 0; i < storedSpecialties.length; i++) {
        spInputs[i].value = storedSpecialties[i];
      }
    // === END / RESTORE SPECIALTIES =======================================



    // === START / RESTORE COMPANY FOUNDED DATE =====================================
      const foundedYear = inputBank['founded_date_year'] || inputBank['carrier']['founded_date_year'];
      const foundedDateDummy = document.querySelector('#foundedDateDummy');
      const radioBtnSeireki = document.querySelector("[data-yeartype='西暦']");
      radioBtnSeireki.classList.add('checked');
      foundedDateDummy.value = foundedYear;
    // === END / RESTORE COMPANY FOUNDED DATE =======================================

    });
  <% end %>
<% end %>