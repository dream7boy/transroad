<% content_for(:after_js) do %>
  <%= javascript_tag do %>
    document.addEventListener("DOMContentLoaded", function() {

      const radioBtnWrappers = document.querySelectorAll("[data-name='yearTypes'] p");
      const foundedDateDummy = document.querySelector('#foundedDateDummy');
      const errorMsg = document.querySelector("[data-name='foundedDateError']");
      const now = new Date();
      let yearType, checkedBtn, yearInput;

      foundedDateDummy.setAttribute('max', now.getFullYear());
      radioBtnWrappers.forEach(function(btn) {
        btn.addEventListener('click', handleClick);
      });
      foundedDateDummy.addEventListener('input', handleInput);
      foundedDateDummy.addEventListener('blur', convertZenToHan);

      // ON CLICK OF RADIO BUTTON
      function handleClick(e) {
        const pseudoRadios = document.querySelectorAll("[data-type='pseudoRadio']");
        pseudoRadios.forEach(function(btn) {
          btn.classList.remove('checked');
        });
        e.currentTarget.querySelector("[data-type='pseudoRadio']").classList.add('checked');
        checkedBtn = document.querySelector("[data-type='pseudoRadio'].checked");
        yearType = checkedBtn.dataset.yeartype;
        if(yearType === "西暦") { foundedDateDummy.value = '' }
        foundedDateDummy.addEventListener('input', handleInput);
        if(foundedDateDummy.value != '') return getGregorianYear(yearType, yearInput);
        errorMsg.textContent = '';
      }

      // ON INPUT OF YEAR
      function handleInput(e) {
        yearInput = Number(e.currentTarget.value);
        if(checkedBtn === null || checkedBtn === undefined) { return errorMsg.textContent = "西暦・和暦を選択してください"; }
        if(yearType === "西暦" && yearInput.toString().length > 3) {
          getGregorianYear(yearType, yearInput);
        } else if(yearType != "西暦") {
          getGregorianYear(yearType, yearInput);
        }
      }

      // ON BLUR OF YEAR INPUT CHECK IF IT NEEDS TO BE HANKAKU-NIZED
      function convertZenToHan(e) {
        const zenkakuArray = ['１','２','３','４','５','６','７','８','９','０'];
        for(let i in zenkakuArray) {
          this['zen' + i] = e.currentTarget.value.indexOf(zenkakuArray[i]);
        }
        const noZenkaku = (
          (this.zen1 === -1) && (this.zen2 === -1) &&
          (this.zen3 === -1) && (this.zen4 === -1) &&
          (this.zen5 === -1) && (this.zen6 === -1) &&
          (this.zen7 === -1) && (this.zen8 === -1) &&
          (this.zen9 === -1) && (this.zen0 === -1)
        );
        if(!noZenkaku) {
          let hankakuString = '';
          foundedDateDummy.value.replace(/[０-９]/g, function(s) {
            hankakuString += String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
          });
          foundedDateDummy.value = hankakuString;
          getGregorianYear(yearType, Number(hankakuString));
        }
        return;
      }

      // IF EVERTHING LOOKS IN ORDER THEN GIVE ME THE GREGORIAN YEAR
      function getGregorianYear(yearType, yearInput) {
        const foundedDateReal = document.querySelector('#carrier_founded_date_year');
        const validYear = 1867 <= yearInput && yearInput <= now.getFullYear();
        let year;
        if ((yearType === "西暦") && (validYear)) {
            year = yearInput;
            errorMsg.textContent = "";
        } else if ((yearType === "西暦") && (yearInput > now.getFullYear())) {
            return errorMsg.textContent = "入力された西暦はもう少し先のようなので、まだ選択できません";
        } else if ((yearType === "西暦") && (yearInput < 1867)) {
            return errorMsg.textContent = "西暦1867（明治元年）以前は選択できません";
        } else if ((yearType === "平成") && (yearInput > 0) && (yearInput <= 30)) {
            year = (yearInput + 1988);
            errorMsg.textContent = "";
        } else if ((yearType === "平成") && (yearInput < 0) || (yearType === "平成") && (yearInput > 30)) {
            return errorMsg.textContent = "入力された和暦年は存在しません";
        } else if ((yearType === "昭和") && (yearInput > 0) && (yearInput <= 64)) {
            year = (yearInput + 1925);
            errorMsg.textContent = "";
        } else if ((yearType === "昭和") && (yearInput < 0) || (yearType === "昭和") && (yearInput > 64)) {
            return errorMsg.textContent = "入力された和暦年は存在しません";
        } else if ((yearType === "大正") && (yearInput > 0) && (yearInput <= 15)) {
            year = (yearInput + 1911);
            errorMsg.textContent = "";
        } else if ((yearType === "大正") && (yearInput < 0) || (yearType === "大正") && (yearInput > 15)) {
            return errorMsg.textContent = "入力された和暦年は存在しません";
        } else if ((yearType === "明治") && (yearInput > 0) && (yearInput <= 45)) {
            year = (yearInput + 1867);
            errorMsg.textContent = "";
        } else if ((yearType === "明治") && (yearInput < 0) || (yearType === "明治") && (yearInput > 45)) {
            return errorMsg.textContent = "入力された和暦年は存在しません";
        }
        return foundedDateReal.value = year;
      }

    });
  <% end %>
<% end %>